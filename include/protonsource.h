// Author: John Cairns <john@2ad.com>
// Date:   July 26, 2005


//     GZKFast - An environment for astrophysical simulation.
//     Copyright (C) 2005 John A Cairns <john@2ad.com>

//     This program is free software; you can redistribute it and/or modify
//     it under the terms of the GNU General Public License as published by
//     the Free Software Foundation; either version 2 of the License, or
//     (at your option) any later version.

//     This program is distributed in the hope that it will be useful,
//     but WITHOUT ANY WARRANTY; without even the implied warranty of
//     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//     GNU General Public License for more details.

//     You should have received a copy of the GNU General Public License
//     along with this program; if not, write to the Free Software
//     Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
//     02110-1301  USA

//     John Cairns
//     2271 Coventry Rd    
//     Upper Arlington, OH, 43221


#ifndef PROTONSOURCE_H
#define PROTONSOURCE_H 1

// std c++
#include <list>

// local include
#include "physicalconstants.h"


#include "particle.h"
#include "source.h"
#include "proton.h"
#include "protonspectrum.h"
#include "deltaspectrum.h"
#include "gvector.h"

namespace GZKFast {

// This is a source of ultra high energy protons.
//    A source generates a particle by sampling an energy 
//    spectrum and producing a particle of suitable energy
//    with momentum oriented toward a given destination

    class DLLEXPORT ProtonSource : public Source {
        ProtonSpectrum          protonSpectrum;

        // source placement in sky
        Position                r;
        
        // Top Down percent
        GFloat					tdPct;
        
        std::list<DeltaSpectrum> deltaSrc;
        std::list<DeltaSpectrum>::iterator deltaSrcIter;
        
      public:
        // construct a new proton source with the given distribution
        // see paramaters for ProtonSpectrum.
        ProtonSource(GFloat minE, GFloat maxE, GFloat a, const Position &rVec, const GFloat td);

        // destructor
        ~ProtonSource();

        // Generate a particle by sampling an energy spectrum
        // and return the particle oriented with momentum toward
        // destination.
        //
        // Note: all events generated by this object
        // will be released when this object is destroyed.
        virtual Particle *getEvent(const Position &dest);
        
        
        // add a delta function source at the specified energy
        virtual void addDeltaSrc(GFloat energy);

        const Position &getPosition(void) const;

    };
};

#endif
